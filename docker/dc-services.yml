version: '2.3'

services:

  autoheal:
    # Process that monitors other dockers, and restarts them once they become unhealthy
    # Requires container to have an "autoheal=true" label
    image: willfarrell/autoheal
    restart: always
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    logging:
      driver: json-file
      options: {max-file: "3", max-size: "10m"}

  mapshaper:
    # Extra web UI tool to process map geometry results
    image: crazycapivara/docker-mapshaper
    restart: always
    ports:
      - "5555"
    networks:
      - proxy_net
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=proxy_net"
      - "traefik.frontend.rule=Host:${SOPHOX_HOST};PathPrefixStrip:/mapshaper/;Method:GET"
      - "traefik.frontend.headers.customResponseHeaders=Access-Control-Allow-Origin:*||access-control-allow-methods:GET,OPTIONS"
    logging:
      driver: json-file
      options: {max-file: "3", max-size: "10m"}

  vote-server:
    # Records user votes for feature modification
    image: sophox/vote-server
    restart: always
    environment:
      BLAZEGRAPH_URL: "${BLAZEGRAPH_URL}"
    ports:
      - "9979"
    networks:
      - proxy_net
      - blazegraph_net
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=proxy_net"
      - "traefik.frontend.rule=Host:${SOPHOX_HOST};PathPrefixStrip:/store/;Method:PUT,DELETE,OPTIONS"
    logging:
      driver: json-file
      options: {max-file: "3", max-size: "10m"}

  osm-regions:
    # Serves geoshapes from Postgres, attaching them to the SPARQL query results
    image: sophox/osm-regions-server
    restart: always
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_DB: gis
      POSTGRES_USER: sophox
      POSTGRES_PASSWORD:
      BLAZEGRAPH_URL: "${BLAZEGRAPH_URL}"
      WIKIBASE_URL: "https://wikibase.org/sparql"
      REGIONS_TABLE: planet_osm_polygon
    ports:
      - "9978"
    networks:
      - proxy_net
      - postgres_net
      - blazegraph_net
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=proxy_net"
      - "traefik.frontend.rule=Host:${SOPHOX_HOST};PathPrefixStrip:/regions/;Method:GET"
      - "traefik.frontend.headers.customResponseHeaders=Access-Control-Allow-Origin:*||access-control-allow-methods:GET,OPTIONS"
    logging:
      driver: json-file
      options: {max-file: "3", max-size: "10m"}

networks:
  proxy_net:
    external: true
  postgres_net:
  blazegraph_net:
