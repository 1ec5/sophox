version: '2.2'

services:

#  traefik:
#    image: traefik
#    restart: always
#    ports:
#      - "80:80"
#      - "443:443"
#      - "127.0.0.1:8080:8080"
#    volumes:
#      - "/var/run/docker.sock:/var/run/docker.sock:ro"
#      - "${REPO_DIR}/docker/traefik.toml:/traefik.toml:ro"
#      - "${ACME_FILE}:/acme.json:rw"
#    container_name: traefik
#    logging:
#      driver: json-file
#      options: {max-file: 5, max-size: 10m}

#  sophox-gui:
#    build: https://github.com/nickpeihl/wikidata-query-gui.git#dockerize
#    ports:
#      - "80"
#    labels:
#      - "traefik.enable=true"
#      - "traefik.frontend.rule=Host:staging.sophox.org"
#    logging:
#      driver: json-file
#      options: {max-file: 5, max-size: 10m}

#  mapshaper:
#    image: crazycapivara/docker-mapshaper
#    ports:
#      - "5555"
#    labels:
#      - "traefik.enable=true"
#      - "traefik.frontend.rule=Host:staging.sophox.org;PathPrefixStrip:/mapshaper/"
#    logging:
#      driver: json-file
#      options: {max-file: 5, max-size: 10m}

#  vote-server:
#    build: "${BUILD_DIR}/vote-server"
#    environment:
#      SOPHOX_URL: "http://blazegraph:9999/bigdata/sparql"
#    ports:
#    - "9979"
#    networks:
#    - blazegraph_net
#    depends_on:
#    - blazegraph
#    labels:
#    - "traefik.enable=true"
#    - "traefik.frontend.rule=Host:staging.sophox.org;PathPrefixStrip:/store/"
##    - "traefik.port=80"
#    logging:
#      driver: json-file
#      options: {max-file: 5, max-size: 10m}

#  osm-regions:
#    build: "${BUILD_DIR}/osm-regions-server"
#    environment:
#      POSTGRES_HOST: postgres
#      POSTGRES_DB: gis
#      POSTGRES_USER: sophox
#      POSTGRES_PASSWORD:
#      SOPHOX_URL: "http://blazegraph:9999/bigdata/sparql"
#      WIKIBASE_URL: "https://wikibase.org/bigdata/namespace/wdq/sparql"
#      REGIONS_TABLE: planet_osm_polygon
#    ports:
#    - "9978"
#    networks:
#    - postgres_net
#    - blazegraph_net
#    depends_on:
#    - postgres
#    - blazegraph
#    labels:
#    - "traefik.enable=true"
#    - "traefik.frontend.rule=Host:staging.sophox.org;PathPrefixStrip:/regions/"
#  #    - "traefik.port=80"
#    logging:
#      driver: json-file
#      options: {max-file: 5, max-size: 10m}


  osm-to-postgres:
    image: sophox/osm2pgsql_osmium
    volumes:
    - "${STATUS_DIR}:/app-status:rw"               # status files (e.g. file.downloaded)
    - "${REPO_DIR}/osm-to-pgsql:/osm-to-pgsql:ro"  # source code
    - "${DOWNLOAD_DIR}:/downloads:rw"              # downloaded planet file
    - "${OSM_PGSQL_DATA_DIR}:/osm-pgsql:rw"
    - "${OSM_PGSQL_TEMP_DIR}:/osm-pgsql-temp:rw"
    environment:
      FLAG_IMPORTED: "/app-status/osm-pgsql.imported"
      FLAGS_TO_DELETE_OSM_FILE: "/app-status/osm-rdf.parsed /app-status/osm-pgsql.imported"
      OSM_FILE_PATH: "/downloads/${OSM_FILE}"
      POSTGRES_DB: gis
      POSTGRES_USER: sophox
      POSTGRES_PASSWORD:
      OSM_PGSQL_DATA: "/osm-pgsql"
      OSM_PGSQL_TEMP: "/osm-pgsql-temp"
      OSM_PGSQL_CODE: "/osm-to-pgsql"
      # MEM is a percentage of total machine memory
      OSM_PGSQL_MEM_IMPORT: 30
      OSM_PGSQL_CPU_IMPORT: 3
      OSM_PGSQL_MEM_UPDATE: 10
      OSM_PGSQL_CPU_UPDATE: 2
      LOOP_SLEEP: 60
    command: /osm-to-pgsql/osm-to-pgsql.sh
    networks:
    - postgres_net
    depends_on:
    - postgres
    logging:
      driver: json-file
      options: {max-file: 5, max-size: 10m}

  osm-to-blazegraph:
    build: "${BUILD_DIR}/osm2rdf"
    mem_limit: "${MEM_30_PRCNT_MB:-4000}m"
    memswap_limit: "${MEM_30_PRCNT_MB:-4000}m"
    mem_swappiness: 0
    volumes:
    - "${STATUS_DIR}:/app-status:rw"
    - "${DOWNLOAD_DIR}:/downloads:rw"
    - "${OSM_RDF_DATA_DIR}:/osm-rdf:rw"
    - "${OSM_RDF_TEMP_DIR}:/osm-rdf-temp:rw"
    environment:
      FLAG_PARSED: "/app-status/osm-rdf.parsed"
      FLAG_IMPORTED: "/app-status/osm-rdf.imported"
      FLAGS_TO_DELETE_OSM_FILE: "/app-status/osm-rdf.parsed /app-status/osm-pgsql.imported"
      OSM_FILE_PATH: "/downloads/${OSM_FILE}"
      OSM_RDF_DATA: "/osm-rdf"
      OSM_RDF_TEMP: "/osm-rdf-temp"
      OSM_RDF_WORKERS: 2
    networks:
    - blazegraph_net
    depends_on:
    - blazegraph
    logging:
      driver: json-file
      options: {max-file: 5, max-size: 10m}


  # shared_buffers                  https://www.postgresql.org/docs/9.6/runtime-config-resource.html#GUC-SHARED-BUFFERS
  # work_mem                        https://www.postgresql.org/docs/9.6/runtime-config-resource.html#GUC-WORK-MEM
  # maintenance_work_mem            https://www.postgresql.org/docs/9.6/runtime-config-resource.html#GUC-MAINTENANCE-WORK-MEM
  # effective_io_concurrency        https://www.postgresql.org/docs/9.6/runtime-config-resource.html#GUC-EFFECTIVE-IO-CONCURRENCY
  # max_worker_processes            https://www.postgresql.org/docs/9.6/runtime-config-resource.html#GUC-MAX-WORKER-PROCESSES
  # max_parallel_workers_per_gather https://www.postgresql.org/docs/9.6/runtime-config-resource.html#GUC-MAX-PARALLEL-WORKERS-PER-GATHER
  # checkpoint_timeout              https://www.postgresql.org/docs/9.6/runtime-config-wal.html#GUC-CHECKPOINT-TIMEOUT
  # max_wal_size                    https://www.postgresql.org/docs/9.6/runtime-config-wal.html#GUC-MAX-WAL-SIZE
  # min_wal_size                    https://www.postgresql.org/docs/9.6/runtime-config-wal.html#GUC-MIN-WAL-SIZE
  # checkpoint_completion_target    https://www.postgresql.org/docs/9.6/runtime-config-wal.html#GUC-CHECKPOINT-COMPLETION-TARGET
  # random_page_cost                https://www.postgresql.org/docs/9.6/runtime-config-query.html#GUC-RANDOM-PAGE-COST
  postgres:
    image: "openmaptiles/postgis:2.9"
    volumes:
      - "${DATA_DIR}/postgres:/var/lib/postgresql/data:rw"
    environment:
      POSTGRES_DB: gis
      POSTGRES_USER: sophox
      POSTGRES_PASSWORD:
    command: >-
      postgres
      -c 'shared_buffers=${MEM_15_PRCNT_MB}MB'
      -c 'work_mem=${MEM_5_PRCNT_MB}MB'
      -c 'maintenance_work_mem=${MEM_15_PRCNT_MB}MB'
      -c 'effective_io_concurrency=200'
      -c 'max_worker_processes=5'
      -c 'max_parallel_workers_per_gather=2'
      -c 'checkpoint_timeout=1h'
      -c 'max_wal_size=5GB'
      -c 'min_wal_size=1GB'
      -c 'checkpoint_completion_target=0.7'
      -c 'random_page_cost=1.1'
    ports:
    - "5432"
    networks:
    - postgres_net
    logging:
      driver: json-file
      options: {max-file: 5, max-size: 10m}

  blazegraph:
    image: openjdk:8-jdk
    working_dir: /app
    volumes:
    - "${DATA_DIR}/blazegraph_app:/app:ro"
      # Make sure it matches BLAZEGRAPH_JNL_DATA_FILE var in startup.sh
    - "${DATA_DIR}/blazegraph:/app-data:rw"
             # Disable upstream warnings
    command: "./runBlazegraph.sh -o '-Dorg.eclipse.jetty.annotations.AnnotationParser.LEVEL=OFF'"
    ports:
    - "9999"
    networks:
    - blazegraph_net
    logging:
      driver: json-file
      options: {max-file: 5, max-size: 10m}

networks:
  postgres_net:
  blazegraph_net:
