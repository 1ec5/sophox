version: '3'

services:

#  traefik:
#    image: traefik
#    restart: always
#    ports:
#      - "80:80"
#      - "443:443"
#      - "127.0.0.1:8080:8080"
#    volumes:
#      - "/var/run/docker.sock:/var/run/docker.sock:ro"
#      - "${REPO_DIR}/docker/traefik.toml:/traefik.toml:ro"
#      - "${ACME_FILE}:/acme.json:rw"
#    container_name: traefik

  postgres-updater:
    image: sophox/osm2pgsql_osmium
    command: /osm-to-pgsql/osm-to-pgsql.sh
    volumes:
    - "${REPO_DIR}/osm-to-pgsql:/osm-to-pgsql:ro"
    - "${DOWNLOAD_DIR}:/downloads:ro"
    - "${OSM_PGSQL_DATA_DIR}:/osm-pgsql:rw"
    environment:
      OSM_FILE: "/downloads/${OSM_FILE}"
      POSTGRES_HOST: postgres
      POSTGRES_DB: gis
      POSTGRES_USER: sophox
      POSTGRES_PASSWORD:
      OSM_PGSQL_DATA: "/osm-pgsql"
      OSM_PGSQL_CODE: "/osm-to-pgsql"
      # Note that cache MEM is total per container, but will be divided by CPU count
      OSM_PGSQL_MEM_IMPORT: 6000
      OSM_PGSQL_CPU_IMPORT: 4
      OSM_PGSQL_MEM_UPDATE: 2000
      OSM_PGSQL_CPU_UPDATE: 2
      LOOP_SLEEP: 60
    networks:
    - postgres_conn
    depends_on:
    - postgres

  osm-to-rdf:
    build: "${REPO_DIR2}/osm2rdf"
    volumes:
    - "${DOWNLOAD_DIR}:/downloads:ro"
    - "${OSM_RDF_DATA_DIR}:/osm-rdf:rw"
    environment:
      OSM_FILE: "/downloads/${OSM_FILE}"
      OSM_RDF_DATA: "/osm-rdf"
#    networks:
#    - blazegraph_conn
#    depends_on:
#    - blazegraph

  osm-regions:
    build: "${REPO_DIR2}/osm-regions-server"
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_DB: gis
      POSTGRES_USER: sophox
      POSTGRES_PASSWORD:
      WIKIBASE_URL: "http://blazegraph/bigdata/sparql"
      SOPHOX_URL: "https://sophox.org/bigdata/namespace/wdq/sparql"
      REGIONS_TABLE: planet_osm_polygon
#      OSM_REGIONS_SQL_WATER_TABLE: "${}"
    ports:
    - "9978"
    networks:
    - postgres_conn
    - blazegraph_conn
    depends_on:
    - postgres
    labels:
    - "traefik.enable=true"
    - "traefik.frontend.rule=Host:staging.sophox.org;PathPrefixStrip:/regions/"
#    - "traefik.port=80"


  #  sophox-gui:
  #    build: https://github.com/nickpeihl/wikidata-query-gui.git#dockerize
  #    ports:
  #      - "80"
  #    labels:
  #      - "traefik.enable=true"
  #      - "traefik.frontend.rule=Host:staging.sophox.org"

  #  mapshaper:
  #    image: crazycapivara/docker-mapshaper
  #    ports:
  #      - "5555"
  #    labels:
  #      - "traefik.enable=true"
  #      - "traefik.frontend.rule=Host:staging.sophox.org;PathPrefixStrip:/mapshaper/"


  postgres:
    image: "openmaptiles/postgis:2.9"
    # DblCheck: Nick said it makes import more efficient
    command: -c 'max_wal_size=5GB'
    volumes:
      - "${DATA_DIR}/postgres:/var/lib/postgresql/data:rw"
    networks:
      - postgres_conn
    ports:
      - "5432"
    environment:
      POSTGRES_DB: gis
      POSTGRES_USER: sophox
      POSTGRES_PASSWORD:

networks:
  postgres_conn:
  blazegraph_conn:

