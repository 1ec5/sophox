version: '2.2'

services:

  traefik:
    # Web proxy
    image: traefik
    # restart: always
    ports:
      - "80:80"
      - "443:443"
      - "127.0.0.1:8080:8080"
    networks:
    - proxy_net
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "${REPO_DIR}/docker/traefik.toml:/traefik.toml:ro"
      - "${ACME_FILE}:/acme.json:rw"
    container_name: traefik
    logging:
      driver: json-file
      options: {max-file: "3", max-size: "10m"}

#  sophox-gui:
#    # Main web interface
#    build: https://github.com/nickpeihl/wikidata-query-gui.git#dockerize
#    ports:
#      - "80"
#    labels:
#      - "traefik.enable=true"
#      - "traefik.frontend.rule=Host:staging.sophox.org;Method:GET"
#    logging:
#      driver: json-file
#      options: {max-file: "3", max-size: "10m"}

  mapshaper:
    # Extra web UI tool to process map geometry results
    image: crazycapivara/docker-mapshaper
    # restart: always
    ports:
      - "5555"
    networks:
      - proxy_net
    labels:
      - "traefik.enable=true"
      - "traefik.frontend.rule=Host:staging.sophox.org;PathPrefixStrip:/mapshaper/;Method:GET"
      - "traefik.frontend.headers.customResponseHeaders=Access-Control-Allow-Origin:*||access-control-allow-methods:GET,OPTIONS"
    logging:
      driver: json-file
      options: {max-file: "3", max-size: "10m"}

#  vote-server:
#    # Records user votes for feature modification
#    build: "${BUILD_DIR}/vote-server"
#    # restart: always
#    environment:
#      SOPHOX_URL: "http://blazegraph:9999/bigdata/sparql"
#    ports:
#      - "9979"
#    networks:
#      - proxy_net
#      - blazegraph_net
#    depends_on:
#      - blazegraph
#    labels:
#      - "traefik.enable=true"
#      - "traefik.frontend.rule=Host:staging.sophox.org;PathPrefixStrip:/store/;Method:POST"
#    logging:
#      driver: json-file
#      options: {max-file: "3", max-size: "10m"}

  osm-regions:
    # Serves geoshapes from Postgres, attaching them to the SPARQL query results
    build: "${BUILD_DIR}/osm-regions-server"
    # restart: always
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_DB: gis
      POSTGRES_USER: sophox
      POSTGRES_PASSWORD:
      SOPHOX_URL: "http://blazegraph:9999/bigdata/sparql"
      WIKIBASE_URL: "https://wikibase.org/bigdata/namespace/wdq/sparql"
      REGIONS_TABLE: planet_osm_polygon
    ports:
      - "9978"
    networks:
      - proxy_net
      - postgres_net
      - blazegraph_net
    depends_on:
      - postgres
      - blazegraph
    labels:
      - "traefik.enable=true"
      - "traefik.frontend.rule=Host:staging.sophox.org;PathPrefixStrip:/regions/;Method:GET"
      - "traefik.frontend.headers.customResponseHeaders=Access-Control-Allow-Origin:*||access-control-allow-methods:GET,OPTIONS"
    logging:
      driver: json-file
      options: {max-file: "3", max-size: "10m"}

  osm-to-postgres:
    # Parse osm file into Postgres DB, and continuously update from live OSM data
    image: sophox/osm2pgsql_osmium
    # restart: always
    volumes:
      - "${STATUS_DIR}:/app-status:rw"               # status files (e.g. file.downloaded)
      - "${REPO_DIR}/osm-to-pgsql:/osm-to-pgsql:ro"  # source code
      - "${DOWNLOAD_DIR}:/downloads:rw"              # downloaded planet file
      - "${OSM_PGSQL_DATA_DIR}:/osm-pgsql:rw"
      - "${OSM_PGSQL_TEMP_DIR}:/osm-pgsql-temp:rw"
    environment:
      FLAG_PG_IMPORTED: "/app-status/osm-pgsql.imported"
      FLAGS_TO_DELETE_OSM_FILE: "/app-status/osm-rdf.parsed /app-status/osm-pgsql.imported"
      OSM_FILE_PATH: "/downloads/${OSM_FILE}"
      POSTGRES_HOST: postgres
      POSTGRES_DB: gis
      POSTGRES_USER: sophox
      POSTGRES_PASSWORD:
      OSM_PGSQL_DATA: "/osm-pgsql"
      OSM_PGSQL_TEMP: "/osm-pgsql-temp"
      OSM_PGSQL_CODE: "/osm-to-pgsql"
      # MEM is a percentage of total machine memory
      OSM_PGSQL_MEM_IMPORT: "${MEM_30_PRCNT_MB}"
      OSM_PGSQL_CPU_IMPORT: 4
      OSM_PGSQL_MEM_UPDATE: "${MEM_5_PRCNT_MB}"
      OSM_PGSQL_CPU_UPDATE: 2
      LOOP_SLEEP: 60
    command: /osm-to-pgsql/osm-to-pgsql.sh
    networks:
      - postgres_net
    depends_on:
      - postgres
    logging:
      driver: json-file
      options: {max-file: "3", max-size: "10m"}

  osm-to-blazegraph:
    # This container parses data into TTLs (sets FLAG_TTL_PARSED), waits for FLAG_TTL_IMPORTED,
    # and continuously updates from OSM data
    build: "${BUILD_DIR}/osm2rdf"
    # restart: always
    mem_limit: "${MEM_65_PRCNT_MB}m"
    memswap_limit: "${MEM_65_PRCNT_MB}m"
    mem_swappiness: 0
    working_dir: "/app"
    command: osm2rdf.sh
    volumes:
      - "${REPO_DIR}/osm2rdf:/app:ro"
      - "${STATUS_DIR}:/app-status:rw"
      - "${DOWNLOAD_DIR}:/downloads:rw"
      - "${OSM_RDF_DATA_DIR}:/osm-rdf:rw"
      - "${OSM_RDF_TEMP_DIR}:/osm-rdf-temp:rw"
      - "${OSM_TTLS_DIR}:/osm-rdf-ttls:rw"
    environment:
      FLAG_TTL_PARSED: "/app-status/osm-rdf.parsed"     # Set this flag after parsing into TTLs
      FLAG_TTL_IMPORTED: "/app-status/osm-rdf.imported" # Wait for this flag before starting updates
      FLAGS_TO_DELETE_OSM_FILE: "/app-status/osm-rdf.parsed /app-status/osm-pgsql.imported"
      OSM_FILE_PATH: "/downloads/${OSM_FILE}"
      OSM_RDF_DATA: "/osm-rdf"
      OSM_RDF_TEMP: "/osm-rdf-temp"
      OSM_RDF_TTLS: "/osm-rdf-ttls"
      OSM_RDF_WORKERS: 4
      OSM_RDF_MAX_STMTS: 10000
      SOPHOX_URL: "http://blazegraph:9999/bigdata/sparql"
    networks:
      - blazegraph_net
    depends_on:
      - blazegraph
    logging:
      driver: json-file
      options: {max-file: "3", max-size: "10m"}

  blazegraph-updater:
    # This container waits for FLAG_TTL_PARSED, imports TTLs into Blazegraph & sets FLAG_TTL_IMPORTED,
    # and continuously updates from OSM wiki
    image: openjdk:8-jdk
    # restart: always
    volumes:
      - "${STATUS_DIR}:/app-status:rw"
      - "${BLAZEGRAPH_APP_DIR}:/app:ro"
      - "${REPO_DIR}/docker/blazegraph-updater:/app-script:ro"
      - "${OSM_TTLS_DIR}:/osm-rdf-ttls:ro"
    working_dir: /app-script
    command: "./bg-updater.sh"
    environment:
      FLAG_TTL_PARSED: "/app-status/osm-rdf.parsed"      # Wait for this flag
      FLAG_TTL_IMPORTED: "/app-status/osm-rdf.imported"  # Set this flag after import and exit
      OSM_RDF_TTLS: "/osm-rdf-ttls" # Must match Blazegraph container's volume name
      BLAZEGRAPH_APP: "/app"
      BLAZEGRAPH_HOST: "http://blazegraph:9999"
    networks:
      - blazegraph_net
    depends_on:
      - blazegraph
    logging:
      driver: json-file
      options: {max-file: "3", max-size: "10m"}

  blazegraph:
    image: "${BLAZEGRAPH_IMAGE}"
    mem_limit: "${MEM_65_PRCNT_MB}m"
    memswap_limit: "${MEM_65_PRCNT_MB}m"
    mem_swappiness: 0
    # restart: always
    volumes:
      - "${BLAZEGRAPH_APP_DIR}:/app:ro"
      - "${BLAZEGRAPH_DATA_DIR}:/app-data:rw"  # See BLAZEGRAPH_JNL_DATA_FILE var in startup.sh
      - "${OSM_TTLS_DIR}:/osm-rdf-ttls:rw"  # In-container path must specified by bg-updater's OSM_RDF_TTLS
    working_dir: /app
    command: "./runBlazegraph.sh -h 0.0.0.0 -o '-Dorg.eclipse.jetty.annotations.AnnotationParser.LEVEL=OFF'" # Disable upstream warnings
    ports:
      - "9999"
    networks:
      - proxy_net
      - blazegraph_net
    logging:
      driver: json-file
      options: {max-file: "3", max-size: "10m"}
    labels:
      - "traefik.enable=true"
      - "traefik.frontend.rule=Host:staging.sophox.org;PathPrefix:/bigdata;Method:GET"
      - "traefik.frontend.headers.customResponseHeaders=Access-Control-Allow-Origin:*||access-control-allow-methods:GET,OPTIONS"

  # shared_buffers                  https://www.postgresql.org/docs/9.6/runtime-config-resource.html#GUC-SHARED-BUFFERS
  # work_mem                        https://www.postgresql.org/docs/9.6/runtime-config-resource.html#GUC-WORK-MEM
  # maintenance_work_mem            https://www.postgresql.org/docs/9.6/runtime-config-resource.html#GUC-MAINTENANCE-WORK-MEM
  # effective_io_concurrency        https://www.postgresql.org/docs/9.6/runtime-config-resource.html#GUC-EFFECTIVE-IO-CONCURRENCY
  # max_worker_processes            https://www.postgresql.org/docs/9.6/runtime-config-resource.html#GUC-MAX-WORKER-PROCESSES
  # max_parallel_workers_per_gather https://www.postgresql.org/docs/9.6/runtime-config-resource.html#GUC-MAX-PARALLEL-WORKERS-PER-GATHER
  # checkpoint_timeout              https://www.postgresql.org/docs/9.6/runtime-config-wal.html#GUC-CHECKPOINT-TIMEOUT
  # max_wal_size                    https://www.postgresql.org/docs/9.6/runtime-config-wal.html#GUC-MAX-WAL-SIZE
  # min_wal_size                    https://www.postgresql.org/docs/9.6/runtime-config-wal.html#GUC-MIN-WAL-SIZE
  # checkpoint_completion_target    https://www.postgresql.org/docs/9.6/runtime-config-wal.html#GUC-CHECKPOINT-COMPLETION-TARGET
  # random_page_cost                https://www.postgresql.org/docs/9.6/runtime-config-query.html#GUC-RANDOM-PAGE-COST
  postgres:
    image: "openmaptiles/postgis:2.9"
    # restart: always
    volumes:
      - "${POSTGRES_DATA_DIR}:/var/lib/postgresql/data:rw"
    environment:
      POSTGRES_DB: gis
      POSTGRES_USER: sophox
      POSTGRES_PASSWORD:
    command: >-
      postgres
      -c 'shared_buffers=${MEM_15_PRCNT_MB}MB'
      -c 'work_mem=${MEM_5_PRCNT_MB}MB'
      -c 'maintenance_work_mem=${MEM_15_PRCNT_MB}MB'
      -c 'effective_io_concurrency=200'
      -c 'max_worker_processes=5'
      -c 'max_parallel_workers_per_gather=2'
      -c 'checkpoint_timeout=1h'
      -c 'max_wal_size=5GB'
      -c 'min_wal_size=1GB'
      -c 'checkpoint_completion_target=0.7'
      -c 'random_page_cost=1.1'
    ports:
      - "5432"
    networks:
      - postgres_net
    logging:
      driver: json-file
      options: {max-file: "3", max-size: "10m"}

networks:
  postgres_net:
  blazegraph_net:
  proxy_net:
